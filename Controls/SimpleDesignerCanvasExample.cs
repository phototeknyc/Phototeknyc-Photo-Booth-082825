using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace Photobooth.Controls
{
    /// <summary>
    /// Example implementation showing how to integrate SimpleDesignerCanvas with TouchTemplateDesigner
    /// This demonstrates the complete integration pattern and can be used as a reference.
    /// </summary>
    public partial class SimpleDesignerCanvasExample : UserControl
    {
        private SimpleDesignerCanvas _simpleCanvas;
        private LayersPanel _layersPanel;
        private FontControlsPanel _fontControlsPanel;
        private SimpleCanvasLayersAdapter _layersAdapter;
        private SimpleCanvasFontAdapter _fontAdapter;

        public SimpleDesignerCanvasExample()
        {
            InitializeComponent();
            InitializeSimpleCanvas();
        }

        private void InitializeComponent()
        {
            // This would normally be generated by the XAML, but showing the structure here
            Width = 1200;
            Height = 800;

            var mainGrid = new Grid();
            Content = mainGrid;

            // Create layout columns
            mainGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(320) }); // Sidebar
            mainGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto }); // Separator
            mainGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) }); // Canvas

            // Create the sidebar with tabs for layers and font controls
            var sidebar = CreateSidebar();
            Grid.SetColumn(sidebar, 0);
            mainGrid.Children.Add(sidebar);

            // Create separator
            var separator = new GridSplitter
            {
                Width = 3,
                Background = Brushes.Gray,
                VerticalAlignment = VerticalAlignment.Stretch
            };
            Grid.SetColumn(separator, 1);
            mainGrid.Children.Add(separator);

            // Create canvas container
            var canvasContainer = CreateCanvasContainer();
            Grid.SetColumn(canvasContainer, 2);
            mainGrid.Children.Add(canvasContainer);
        }

        private UIElement CreateSidebar()
        {
            var tabControl = new TabControl();

            // Layers tab
            var layersTab = new TabItem { Header = "Layers" };
            _layersPanel = new LayersPanel();
            layersTab.Content = _layersPanel;
            tabControl.Items.Add(layersTab);

            // Font controls tab
            var fontTab = new TabItem { Header = "Typography" };
            _fontControlsPanel = new FontControlsPanel();
            fontTab.Content = _fontControlsPanel;
            tabControl.Items.Add(fontTab);

            return tabControl;
        }

        private UIElement CreateCanvasContainer()
        {
            var container = new Grid();

            // Add toolbar
            container.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            container.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });

            var toolbar = CreateToolbar();
            Grid.SetRow(toolbar, 0);
            container.Children.Add(toolbar);

            // Add scroll viewer with canvas
            var scrollViewer = new ScrollViewer
            {
                HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                Background = Brushes.DarkGray
            };

            _simpleCanvas = new SimpleDesignerCanvas
            {
                Width = 600,
                Height = 1800,
                ShowGrid = true,
                GridSize = 20
            };

            scrollViewer.Content = _simpleCanvas;
            Grid.SetRow(scrollViewer, 1);
            container.Children.Add(scrollViewer);

            return container;
        }

        private UIElement CreateToolbar()
        {
            var toolbar = new ToolBar();

            // Add text button
            var addTextBtn = new Button
            {
                Content = "Add Text",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            addTextBtn.Click += AddTextBtn_Click;
            toolbar.Items.Add(addTextBtn);

            // Add image button
            var addImageBtn = new Button
            {
                Content = "Add Image",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            addImageBtn.Click += AddImageBtn_Click;
            toolbar.Items.Add(addImageBtn);

            // Add placeholder button
            var addPlaceholderBtn = new Button
            {
                Content = "Add Placeholder",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            addPlaceholderBtn.Click += AddPlaceholderBtn_Click;
            toolbar.Items.Add(addPlaceholderBtn);

            toolbar.Items.Add(new Separator());

            // Delete button
            var deleteBtn = new Button
            {
                Content = "Delete Selected",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            deleteBtn.Click += DeleteBtn_Click;
            toolbar.Items.Add(deleteBtn);

            toolbar.Items.Add(new Separator());

            // Z-order buttons
            var bringToFrontBtn = new Button
            {
                Content = "Bring to Front",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            bringToFrontBtn.Click += BringToFrontBtn_Click;
            toolbar.Items.Add(bringToFrontBtn);

            var sendToBackBtn = new Button
            {
                Content = "Send to Back",
                Margin = new Thickness(5),
                Padding = new Thickness(10, 5, 10, 5)
            };
            sendToBackBtn.Click += SendToBackBtn_Click;
            toolbar.Items.Add(sendToBackBtn);

            return toolbar;
        }

        private void InitializeSimpleCanvas()
        {
            if (_simpleCanvas == null || _layersPanel == null || _fontControlsPanel == null)
                return;

            // Create and configure adapters
            _layersAdapter = new SimpleCanvasLayersAdapter(_simpleCanvas, _layersPanel);
            _fontAdapter = new SimpleCanvasFontAdapter(_simpleCanvas, _fontControlsPanel);

            // Add some sample content
            AddSampleContent();
        }

        private void AddSampleContent()
        {
            // Add a sample text item
            var textItem = _simpleCanvas.AddTextItem("Sample Title", new Point(50, 50));
            textItem.FontSize = 24;
            textItem.FontWeight = FontWeights.Bold;
            textItem.TextColor = Brushes.Navy;

            // Add a subtitle
            var subtitle = _simpleCanvas.AddTextItem("Subtitle text", new Point(50, 100));
            subtitle.FontSize = 16;
            subtitle.TextColor = Brushes.DarkGray;

            // Add a placeholder for an image
            var placeholder = _simpleCanvas.AddImageItem(new Point(50, 150), isPlaceholder: true);
            placeholder.Width = 200;
            placeholder.Height = 150;
        }

        // Event handlers for toolbar buttons
        private void AddTextBtn_Click(object sender, RoutedEventArgs e)
        {
            var textItem = _simpleCanvas.AddTextItem("New Text");
            _simpleCanvas.SelectItem(textItem);
        }

        private void AddImageBtn_Click(object sender, RoutedEventArgs e)
        {
            // Open file dialog to select image
            var dialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image files (*.jpg;*.jpeg;*.png;*.bmp)|*.jpg;*.jpeg;*.png;*.bmp|All files (*.*)|*.*",
                Title = "Select Image"
            };

            if (dialog.ShowDialog() == true)
            {
                var imageItem = new SimpleImageItem();
                if (imageItem.LoadImage(dialog.FileName))
                {
                    imageItem.Left = 50;
                    imageItem.Top = 50;
                    _simpleCanvas.AddItem(imageItem);
                    _simpleCanvas.SelectItem(imageItem);
                }
            }
        }

        private void AddPlaceholderBtn_Click(object sender, RoutedEventArgs e)
        {
            var placeholder = _simpleCanvas.AddImageItem(isPlaceholder: true);
            _simpleCanvas.SelectItem(placeholder);
        }

        private void DeleteBtn_Click(object sender, RoutedEventArgs e)
        {
            _simpleCanvas.RemoveSelectedItem();
        }

        private void BringToFrontBtn_Click(object sender, RoutedEventArgs e)
        {
            _simpleCanvas.BringToFront();
        }

        private void SendToBackBtn_Click(object sender, RoutedEventArgs e)
        {
            _simpleCanvas.SendToBack();
        }

        // Cleanup
        protected override void OnUnloaded(RoutedEventArgs e)
        {
            base.OnUnloaded(e);

            _layersAdapter?.Dispose();
            _fontAdapter?.Dispose();
        }

        // Public methods for external control (like from TouchTemplateDesigner)
        public SimpleDesignerCanvas GetCanvas()
        {
            return _simpleCanvas;
        }

        public void ClearCanvas()
        {
            _simpleCanvas?.ClearAllItems();
        }

        public void SetCanvasSize(double width, double height)
        {
            if (_simpleCanvas != null)
            {
                _simpleCanvas.Width = width;
                _simpleCanvas.Height = height;
            }
        }

        public void ShowGrid(bool show)
        {
            if (_simpleCanvas != null)
            {
                _simpleCanvas.ShowGrid = show;
            }
        }
    }
}